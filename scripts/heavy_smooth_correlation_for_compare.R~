#calculate heavy smooth correlation and create plot if required
#for comparing two kmers against each other -->> !!! HSCORRELTATION OF TWO KEMRS AGAINST EACH OTHER NOT CONSIDERING THE BACKGROUND

#get Arguments
args <- commandArgs(trailingOnly = TRUE)

kmer1=args[1]	#kmer of interest
kmer2=args[2]	#kmer of interest2
bandwidth=args[3]	#bandwidth for heavy gaussian smoothing # default = 10

profile1=args[4]		#retrieved and stored profile
profile2=args[5]		#retrieved and stored profile

toplot.flag=args[6]		#TRUE/FALSE if to process and retrieve the plots or not 

if(toplot.flag == 1){	#require only if flag is TRUE
	plot.dir=args[7]	#directory to write the plot to 
}

#split up into profiles from unix stored string
profile1 <- strsplit(profile1, ":")[[1]]
profile2 <- strsplit(profile2, ":")[[1]]

pp1 <- ksmooth(c(1:length(profile1)), profile1, kernel="normal", bandwidth=bandwidth)$y	#smooth
pp2 <- ksmooth(c(1:length(profile2)), profile2, kernel="normal", bandwidth=bandwidth)$y	#smooth


hscorrelation <- cor(pp1, pp2)	#calculate correlation
cat(hscorrelation)	# return heavy smooth correlation value

if(toplot.flag  == 1){	#only if toplotflag = TRUE

	suppressMessages(library(ggplot2))
	#assemble in dataframe for plotting 
	df <- data.frame(x=c(1:length(pp1)), value=c(pp1,pp2), kmer=c(rep(paste0("data profile ",kmer1), length(pp1)),rep(paste0("data profile ",kmer2), length(pp2)) ))

	theplot <- ggplot(df, aes(x=x, y=value , group=kmer, colour=kmer)) + geom_line( ) + ylim(0,0.01) + labs(title=paste0("Heavy Smoothed Profiles ",kmer1," vs. ",kmer2), x="bp idx", y="heavy smoothed cut probability")

	#plot is stored in theplot object #my current solution is to plot it to the desired dir if Flag TRUE /not sure hwo you want to handle plots
	png.file=paste0(plot.dir,'/heavy_smooth_correlation_plot_',kmer1,"_",kmer2,'.png')
	png(png.file, width=900, height=300)
		print(theplot)
	suppress.output <- dev.off()
}	



