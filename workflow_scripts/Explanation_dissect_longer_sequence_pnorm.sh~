#!usr/bin/bash

#second functionality: split a longer sequence into kmers of a specified length adn run every kmer and assemble the stats in a table
#ideally link from every kmer latter to produce all plots as in the single run 
#but for efficiency, all plots are flagged 0 in the run through all splittet kmers

#First set directory for scripts, output directory and location of the common_functions.R file that contains 
#all shared functions sourced from some of the latter scripts:

SCRIPT_DIR=/hts/data4/rschwess/tool_sandbox/scripts			
COMMON_FUNCTIONS=${SCRIPT_DIR}/common_functions.R
OUTPUT_DIR=/hts/data4/rschwess/dnase_motif_tissue/idx_duke_testout

#Specify the directory where the background files (base frequency and naked dnaseI fibroblast cutting) are located,
#Currently this links to files for chr1 only but I'm close to finish the complete genome as background.
BACKGROUND_DIR=/hts/data4/rschwess/database_assembly/idx_correct_assembly/background/hg18_human_JH60/counts

#Specify the location of the tissue specific data (for example human erythroid is located here):
DATA_DIR=/hts/data4/rschwess/database_assembly/idx_correct_assembly/human_ploidy_correct

#select a background/normalization type (choose accordingly normalized kmer count files) there will pnorm dnase and pnorm atac files
#we have to check how much the different backgrounds differ to tell how much different norm types we need to have but at least one for atac and one for dnase will be needed (currently only dnase available)
# currently available "laza" (human fibroblast) "JH40" (human erythroid 40% mapped)
NORM_TYPE="JH60"

#I use the following TAG to create tissue specific sub directories and name the files accordingly when creating the tissue specific data,
#so that by setting a data directory and the correct tag you get access to the tissue specific count files later.
#for erythroid human example
TAG="human_erythroid_hg18"		

#Arguments for the single steps as in single run 
#I'm initially have with them but it would be nice to keeo them somehow easy accessible for future optimizing#

#Arguments for HSCor
#bandwidth to use for gaussian smoothing (default = 10) 
bandwidth_hsc=10
#1=plot 0= no plotting
hsc_plot_flag=0
#dir to write plot if flagged only required if flagged
hsc_plot_dir=${OUTPUT_DIR}

#############
### INPUT ###
#############

#enter a sequence
sequence="CTATGCACGTG"	

#length of sequences to split into
kl=6

#Select accordingly normalized input files
infile_plus=${DATA_DIR}/${TAG}/counts/kmers_${kl}_count_${TAG}_pnorm_${NORM_TYPE}_plus.txt
infile_minus=${DATA_DIR}/${TAG}/counts/kmers_${kl}_count_${TAG}_pnorm_${NORM_TYPE}_minus.txt

#naked counts background
infile_naked_plus=${BACKGROUND_DIR}/kmer_${kl}_hg18_human_JH60_plus_merged
infile_naked_minus=${BACKGROUND_DIR}/kmer_${kl}_hg18_human_JH60_minus_merged

###########################
# Split Sequence in kmers #
###########################

#file to write table to
table_file="${OUTPUT_DIR}/splitted_kmer_table.txt"

#initialize id
id=0

#print table column names
echo -e "kmer\tid\tfsr_plus\tfsr_minus\thscor" >${table_file}


######################################################
# Process each Kmer plot free to get stats (noplots) #
######################################################

for kmer in `Rscript ${SCRIPT_DIR}/dissect_sequence.R ${sequence} ${kl} ${COMMON_FUNCTIONS}`
do

#count up kmer id 
id=$(($id + 1))

###############################
# 1 retrieve & store profiles #
###############################

#get the plus (sense) strand profile for the kmer from the tissue specific dnase footprint counts
profile_plus_out=`Rscript ${SCRIPT_DIR}/retrieve_profile.R ${kmer} ${infile_plus} ${COMMON_FUNCTIONS}`
#output is a string like "count=10000:::14:::12:::.... 

#I then split the string into two variables the counts and the profile(everything after counts=10000, seperated by :::)
#to avoid temporary files, the profiles are splitted at each ::: in each following Rscript that queries them
profile_plus_count=`echo ${profile_plus_out} | perl -ne '/count=(\d+\.?\d*):::/; print $1;'`
profile_plus=`echo ${profile_plus_out} | perl -ne '/:::(.+)/; print $1;'`

#same for antisense, minus strand, query from the tissue specific dnase footprint counts
profile_minus_out=`Rscript ${SCRIPT_DIR}/retrieve_profile.R ${kmer} ${infile_minus} ${COMMON_FUNCTIONS}`
#split into two variables
profile_minus_count=`echo ${profile_minus_out} | perl -ne '/count=(\d+\.?\d*):::/; print $1;'`
profile_minus=`echo ${profile_minus_out} | perl -ne '/:::(.+)/; print $1;'`

#same but for the naked dnase digested fibroblast background cutting
profile_naked_plus_out=`Rscript ${SCRIPT_DIR}/retrieve_profile.R ${kmer} ${infile_naked_plus} ${COMMON_FUNCTIONS}`
#split into two variables
profile_naked_plus_count=`echo ${profile_naked_plus_out} | perl -ne '/count=(\d+\.?\d*):::/; print $1;'`
profile_naked_plus=`echo ${profile_naked_plus_out} | perl -ne '/:::(.+)/; print $1;'`

#same but for the naked dnase digested fibroblast background cutting
profile_naked_minus_out=`Rscript ${SCRIPT_DIR}/retrieve_profile.R ${kmer} ${infile_naked_minus} ${COMMON_FUNCTIONS}`
#split into two variables
profile_naked_minus_count=`echo ${profile_naked_minus_out} | perl -ne '/count=(\d+\.?\d*):::/; print $1;'`
profile_naked_minus=`echo ${profile_naked_minus_out} | perl -ne '/:::(.+)/; print $1;'`

#######
#merge#
#######

profile_merged=`Rscript ${SCRIPT_DIR}/merge_profiles.R ${profile_plus} ${profile_minus}`
profile_naked_merged=`Rscript ${SCRIPT_DIR}/merge_profiles.R ${profile_naked_plus} ${profile_naked_minus}`

########################################
# 2 calculate heavy smooth correlation #
########################################

#execute hsc correlation without plotting as flag is 0
hscor=`Rscript ${SCRIPT_DIR}/heavy_smooth_correlation.R $kmer ${bandwidth_hsc} ${profile_merged} ${profile_naked_merged} ${hsc_plot_flag} ${hsc_plot_dir}`
#returns a value into hscor and writes a plot in the plot directory if flagged

#######################
# 3 Borders SFR score #
#######################

#uses stored profiles and some vlaues for the normalization from hsc step
fsr_out=`Rscript ${SCRIPT_DIR}/fsr_calculation_pnorm_merge.R ${kmer} ${profile_plus} ${profile_plus} ${profile_minus} ${COMMON_FUNCTIONS}`
#output is again a string like: fsr_plus=x fsr_minus=x scale_plus=x scale_minus=x
fsr_merged=`echo $fsr_out} | perl -ne '/fsr_merged=(\d+\.?\d*)\s+/; print $1;'`	
fsr_plus=`echo $fsr_out} | perl -ne '/fsr_plus=(\d+\.?\d*)\s+/; print $1;'`	
fsr_minus=`echo ${fsr_out} | perl -ne '/fsr_minus=(\d+\.?\d*)/; print $1;'`

#####################################################
# write new line for one kmer to the assembly table #
#####################################################
# fsr.plus fsr.minus scale.plus scale.minus hscor dnase.msq dnase.iqr base.msq base.iqr

echo -e "${kmer}\t${id}\t${fsr_merged}\t${fsr_plus}\t${fsr_minus}\t${hscor}\t${dnase_msq}" >>${table_file}

echo "kmer processed... ${id}"

done


